{
  "metadata": {
    "language_info": {
      "codemirror_mode": {
        "name": "python",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8"
    },
    "kernelspec": {
      "name": "python",
      "display_name": "Python (Pyodide)",
      "language": "python"
    }
  },
  "nbformat_minor": 4,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "raw",
      "source": "form functools import reduce",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "def encrypt_password(password):",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "#mengubah karakter string menjadi ASCII",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "ascii_values = [ord(char) for char in password]",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "#1. Value pertama dibagi dengan integer 26 kemudian \ndibulatkan dan dijumlahkan dengan 80 kemudian diubah \nkembali menjadi karakter\n2. Value kedua dihitung sisa bagi dengan 26 kemudian \ndijumlahkan dengan 80 kemudian diubah kembali menjadi \nkarakter\n3. Value ketiga adalah karakter ‘+’ jika value pertama lebih \nbesar dari value kedua, atau value ketiga adalah karakter ‘-’ \njika value pertama tidak lebih besar dari value kedua",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "encrypt_values = [(chr((value//26)+80), chr(value%26+80), '+'if value//26 > value%26 else '-') for value in ascii_values]",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "encrypte_password = reduce(lambda acc, val: acc + val[0] + val[1] + val[2], encrypt_values,'')",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "return encrypted_password",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "password = input(\"Masukka password: \")",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "#mengenkripsi password",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "encryted_password = encrypt_password(password)",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "#menampilkan passwor awal dan yang sudah terenkripsi",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "print(\"password awal: \", password)",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "raw",
      "source": "print(\"password baru: \", encrypted_password)",
      "metadata": {}
    }
  ]
}
